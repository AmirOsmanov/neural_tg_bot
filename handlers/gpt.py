"""–§–∞–π–ª —Å —Ö–µ–Ω–¥–ª–µ—Ä–∞–º–∏ –¥–ª—è —Ä–µ–∂–∏–º–∞ ChatGPT."""

import logging
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import ContextTypes, ConversationHandler
from services.openai_client import ask_chatgpt
from services.ui import get_main_menu_keyboard

logger = logging.getLogger(__name__)

# –°–æ—Å—Ç–æ—è–Ω–∏–µ ¬´–Ω–∞—Ö–æ–¥–∏–º—Å—è –≤ —Ä–µ–∂–∏–º–µ ChatGPT¬ª
GPT_MODE = range(1)


async def start_gpt(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """
    –ó–∞–ø—É—Å–∫ —Ä–µ–∂–∏–º–∞ ChatGPT.
    –ú–æ–∂–µ—Ç –≤—ã–∑—ã–≤–∞—Ç—å—Å—è –∏ —á–µ—Ä–µ–∑ –∫–æ–º–∞–Ω–¥—É /gpt, –∏ —á–µ—Ä–µ–∑ –∫–Ω–æ–ø–∫—É —Å callback_data="gpt_run".
    """
    if update.message:
        # –í—ã–∑–≤–∞–Ω–æ –∫–æ–º–∞–Ω–¥–æ–π /gpt
        user = update.effective_user
        await update.message.reply_text(
            "üß† ChatGPT –∞–∫—Ç–∏–≤–µ–Ω.\n\n–ù–∞–ø–∏—à–∏ —Å–≤–æ–π –≤–æ–ø—Ä–æ—Å –∏–ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ:",
            parse_mode="HTML",
        )

    elif update.callback_query:
        # –í—ã–∑–≤–∞–Ω–æ –Ω–∞–∂–∞—Ç–∏–µ–º –∫–Ω–æ–ø–∫–∏ ChatGPT
        query = update.callback_query
        user = query.from_user
        await query.answer()
        await query.message.delete()

        await context.bot.send_message(
            chat_id=user.id,
            text="üß† ChatGPT –∞–∫—Ç–∏–≤–µ–Ω.\n\n–ù–∞–ø–∏—à–∏ —Å–≤–æ–π –≤–æ–ø—Ä–æ—Å –∏–ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ:",
            parse_mode="HTML",
        )

    logger.info(f"{user.first_name} ({user.id}) –Ω–∞—á–∞–ª –æ–±—â–µ–Ω–∏–µ —Å ChatGPT")
    # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ (GPT_MODE[0]), –∞ –Ω–µ –≤–µ—Å—å range
    return GPT_MODE[0]


async def handle_gpt_message(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—Ö–æ–¥—è—â–∏—Ö —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ —Ä–µ–∂–∏–º–µ ChatGPT."""
    user = update.effective_user
    user_input = update.message.text
    logger.info(f"{user.first_name} ({user.id}) –Ω–∞–ø–∏—Å–∞–ª: {user_input}")

    try:
        response = await ask_chatgpt(user_input)
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞—â–µ–Ω–∏–∏ –∫ ChatGPT: {e}")
        response = "üòî –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ."

    # –ö–Ω–æ–ø–∫–∞ –¥–ª—è –≤–æ–∑–≤—Ä–∞—Ç–∞ –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
    keyboard = [[InlineKeyboardButton("üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="gpt_to_menu")]]
    reply_markup = InlineKeyboardMarkup(keyboard)

    await update.message.reply_text(response, reply_markup=reply_markup)
    return GPT_MODE[0]


async def return_to_menu(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ù–∞–∂–∞–ª–∏ ¬´–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é¬ª ‚Äî –≤–µ—Ä–Ω—É—Ç—å –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é."""
    query = update.callback_query
    await query.answer()
    await query.message.edit_text(
        "üéâ <b>–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ ChatGPT –±–æ—Ç–∞!</b>\n\n–í—ã–±–µ—Ä–∏—Ç–µ –æ–¥–Ω—É –∏–∑ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —Ñ—É–Ω–∫—Ü–∏–π:",
        parse_mode="HTML",
        reply_markup=get_main_menu_keyboard(),
    )
    return ConversationHandler.END


async def cancel(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ö–æ–º–∞–Ω–¥–∞ /cancel ‚Äî –≤—ã—Ö–æ–¥ –∏–∑ —Ä–µ–∂–∏–º–∞ ChatGPT."""
    user = update.effective_user
    logger.info(f"{user.first_name} ({user.id}) –≤—ã—à–µ–ª –∏–∑ ChatGPT")
    await update.message.reply_text("‚ùå –í—ã –≤—ã—à–ª–∏ –∏–∑ —Ä–µ–∂–∏–º–∞ ChatGPT.")
    return ConversationHandler.END
