import logging
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import ContextTypes, ConversationHandler
from services.openai_client import ask_chatgpt
from services.ui import get_main_menu_keyboard

logger = logging.getLogger(__name__)

# 1) GPT_MODE –∑–∞–¥–∞—ë—Ç—Å—è –∫–∞–∫ —Ü–µ–ª–æ–µ —á–∏—Å–ª–æ (–Ω–µ range)
GPT_MODE = 1

async def start_gpt(update_or_query, context: ContextTypes.DEFAULT_TYPE):
    """
    –¢–æ—á–∫–∞ –≤—Ö–æ–¥–∞ –≤ —Ä–µ–∂–∏–º ChatGPT:
    - –µ—Å–ª–∏ –ø—Ä–∏—à–ª–∞ –∫–æ–º–∞–Ω–¥–∞ /gpt ‚ûû update_or_query.message
    - –µ—Å–ª–∏ –ø—Ä–∏—à–ª–∞ –∫–æ–ª–±—ç–∫–æ–º –∫–Ω–æ–ø–∫–∞ gpt_run ‚ûû update_or_query.callback_query
    """
    # 1.1) –†–∞–∑–±–æ—Ä: —ç—Ç–æ CallbackQuery –∏–ª–∏ Message?
    if hasattr(update_or_query, "message") and update_or_query.message:
        # –≤—ã–∑–æ–≤ —á–µ—Ä–µ–∑ /gpt
        message = update_or_query.message
        user = update_or_query.effective_user
        # —É–¥–∞–ª—è–µ–º –∏—Å—Ö–æ–¥–Ω–æ–µ ¬´/gpt¬ª, —á—Ç–æ–±—ã –Ω–µ –∑–∞—Å–æ—Ä—è—Ç—å —á–∞—Ç
        await message.delete()
    else:
        # –≤—ã–∑–æ–≤ —á–µ—Ä–µ–∑ –∫–Ω–æ–ø–∫—É (CallbackQuery)
        query = update_or_query.callback_query
        await query.answer()
        await query.message.delete()
        user = query.from_user
        # –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é ¬´–≤–≤–æ–¥–∏ –∑–∞–ø—Ä–æ—Å¬ª
        message = await context.bot.send_message(
            chat_id=query.from_user.id,
            text="üß† ChatGPT –∞–∫—Ç–∏–≤–µ–Ω.\n\n–ù–∞–ø–∏—à–∏—Ç–µ —Å–≤–æ–π –≤–æ–ø—Ä–æ—Å:",
            parse_mode="HTML",
        )

    logger.info(f"{user.first_name} ({user.id}) –Ω–∞—á–∞–ª –æ–±—â–µ–Ω–∏–µ —Å ChatGPT")
    # –í–æ–∑–≤—Ä–∞—â–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ GPT_MODE = 1
    return GPT_MODE

async def handle_gpt_message(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """
    –í —ç—Ç–æ–º —Å–æ—Å—Ç–æ—è–Ω–∏–∏ (GPT_MODE) –ª–æ–≤–∏–º –ª—é–±–æ–π —Ç–µ–∫—Å—Ç ‚ûû –ø–µ—Ä–µ–¥–∞—ë–º –≤ ask_chatgpt ‚ûû –æ—Ç–≤–µ—á–∞–µ–º
    –∏ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –∫–Ω–æ–ø–∫—É ¬´–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é¬ª.
    """
    user = update.effective_user
    user_input = update.message.text
    logger.info(f"{user.first_name} ({user.id}) –Ω–∞–ø–∏—Å–∞–ª –≤ ChatGPT: {user_input}")

    try:
        response = await ask_chatgpt(user_input)
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞—â–µ–Ω–∏–∏ –∫ OpenAI: {e}")
        response = "üòî –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ."

    # –ö–Ω–æ–ø–∫–∞ ¬´üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é¬ª
    keyboard = [[InlineKeyboardButton("üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="gpt_to_menu")]]
    reply_markup = InlineKeyboardMarkup(keyboard)

    await update.message.reply_text(
        response,
        reply_markup=reply_markup
    )

    # –û—Å—Ç–∞—ë–º—Å—è –≤ —Ç–æ–º –∂–µ —Å–æ—Å—Ç–æ—è–Ω–∏–∏ ‚Äî –∂–¥—ë–º —Å–ª–µ–¥—É—é—â–µ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è –∏–ª–∏ ¬´–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é¬ª
    return GPT_MODE

async def return_to_menu(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """
    –ü—Ä–∏ –Ω–∞–∂–∞—Ç–∏–∏ ¬´üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é¬ª –≤–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
    –∏ –∑–∞–≤–µ—Ä—à–∞–µ–º Conversation (–≤–æ–∑–≤—Ä–∞—â–∞–µ–º `ConversationHandler.END`).
    """
    query = update.callback_query
    await query.answer()

    await query.message.edit_text(
        "üéâ <b>–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ ChatGPT –±–æ—Ç–∞!</b>\n\n"
        "–í—ã–±–µ—Ä–∏—Ç–µ –æ–¥–Ω—É –∏–∑ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —Ñ—É–Ω–∫—Ü–∏–π:",
        parse_mode="HTML",
        reply_markup=get_main_menu_keyboard()
    )
    return ConversationHandler.END

async def cancel(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """
    –û–±—Ä–∞–±–æ—Ç—á–∏–∫ /cancel ‚Äî –≤—ã—Ö–æ–¥–∏—Ç –∏–∑ —Ä–µ–∂–∏–º–∞ ChatGPT –∏ –∑–∞–≤–µ—Ä—à–∞–µ—Ç ConversationHandler.
    """
    user = update.effective_user
    logger.info(f"{user.first_name} ({user.id}) –≤—ã—à–µ–ª –∏–∑ —Ä–µ–∂–∏–º–∞ ChatGPT")
    await update.message.reply_text("‚ùå –í—ã –≤—ã—à–ª–∏ –∏–∑ —Ä–µ–∂–∏–º–∞ ChatGPT.")
    return ConversationHandler.END
