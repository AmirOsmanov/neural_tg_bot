import logging
import os
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import ContextTypes, ConversationHandler
from services.openai_client import ask_chatgpt
from services.ui import get_main_menu_keyboard

logger = logging.getLogger(__name__)

# –ï–¥–∏–Ω—Å—Ç–≤–µ–Ω–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ ¬´ChatGPT-—Ä–µ–∂–∏–º–∞¬ª ‚Äî –ø—Ä–æ—Å—Ç–æ —á–∏—Å–ª–æ 0
GPT_MODE = 0


async def start_gpt(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """
    –ó–∞–ø—É—Å–∫ –¥–∏–∞–ª–æ–≥–∞ —Å ChatGPT: —Å–Ω–∞—á–∞–ª–∞ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ, –ø–æ—Ç–æ–º –ø—Ä–∏–≥–ª–∞—à–∞–µ–º
    –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∑–∞–¥–∞—Ç—å –≤–æ–ø—Ä–æ—Å.
    """
    img_path = os.path.join("images", "chatgpt.jpg")

    # –ï—Å–ª–∏ –ø—Ä–∏—à—ë–ª CallbackQuery (–Ω–∞–∂–∞—Ç–∏–µ –Ω–∞ –∫–Ω–æ–ø–∫—É ¬´ChatGPT¬ª)
    if update.callback_query:
        query = update.callback_query
        await query.answer()
        await query.message.delete()

        # 1) –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∫–∞—Ä—Ç–∏–Ω–∫—É
        with open(img_path, "rb") as photo:
            await context.bot.send_photo(chat_id=query.from_user.id, photo=photo)

        # 2) –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏–µ –∫ –≤–≤–æ–¥—É
        await context.bot.send_message(
            chat_id=query.from_user.id,
            text="üß† ChatGPT –∞–∫—Ç–∏–≤–µ–Ω.\n\n–ù–∞–ø–∏—à–∏ —Å–≤–æ–π –≤–æ–ø—Ä–æ—Å –∏–ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ:",
            parse_mode="HTML"
        )

        user = query.from_user

    # –ï—Å–ª–∏ –ø—Ä–∏—à—ë–ª –æ–±—ã—á–Ω—ã–π /gpt (Update.message)
    elif update.message:
        message = update.message
        user = update.effective_user

        # 1) –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∫–∞—Ä—Ç–∏–Ω–∫—É
        with open(img_path, "rb") as photo:
            await message.reply_photo(photo=photo)

        # 2) –ü—Ä–∏–≥–ª–∞—à–µ–Ω–∏–µ –∫ –≤–≤–æ–¥—É
        await message.reply_text(
            "üß† ChatGPT –∞–∫—Ç–∏–≤–µ–Ω.\n\n–ù–∞–ø–∏—à–∏ —Å–≤–æ–π –≤–æ–ø—Ä–æ—Å –∏–ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ:",
            parse_mode="HTML"
        )

    else:
        # –ù–∞ –≤—Å—è–∫–∏–π —Å–ª—É—á–∞–π, –µ—Å–ª–∏ –≤–¥—Ä—É–≥ –Ω–∏ callback_query, –Ω–∏ message –Ω–µ—Ç
        return ConversationHandler.END

    logger.info(f"{user.first_name} ({user.id}) –Ω–∞—á–∞–ª –æ–±—â–µ–Ω–∏–µ —Å ChatGPT")
    return GPT_MODE  # –≤–æ–∑–≤—Ä–∞—â–∞–µ–º 0, –∏ —ç—Ç–æ —Å–æ–≤–ø–∞–¥–∞–µ—Ç —Å –∫–ª—é—á–æ–º –≤ states


async def handle_gpt_message(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """
    –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ —Ä–µ–∂–∏–º–µ ChatGPT: —à–ª—ë–º ask_chatgpt –∏
    –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –æ—Ç–≤–µ—Ç —Å –∫–Ω–æ–ø–∫–æ–π ¬´–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é¬ª.
    """
    user = update.effective_user
    user_input = update.message.text
    logger.info(f"{user.first_name} ({user.id}) –Ω–∞–ø–∏—Å–∞–ª –≤ ChatGPT: {user_input}")

    try:
        response = await ask_chatgpt(user_input)
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞—â–µ–Ω–∏–∏ –∫ ChatGPT: {e}")
        response = "üòî –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ."

    keyboard = [[InlineKeyboardButton("üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="gpt_to_menu")]]
    reply_markup = InlineKeyboardMarkup(keyboard)

    await update.message.reply_text(
        response,
        reply_markup=reply_markup
    )
    return GPT_MODE  # —Å–Ω–æ–≤–∞ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º 0


async def return_to_menu(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–∫–∏ ¬´üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é¬ª –≤–Ω—É—Ç—Ä–∏ ChatGPT."""
    query = update.callback_query
    await query.answer()
    await query.message.edit_text(
        "üéâ <b>–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ ChatGPT –±–æ—Ç–∞!</b>\n\n–í—ã–±–µ—Ä–∏—Ç–µ –æ–¥–Ω—É –∏–∑ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —Ñ—É–Ω–∫—Ü–∏–π:",
        parse_mode="HTML",
        reply_markup=get_main_menu_keyboard()
    )
    return ConversationHandler.END


async def cancel(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã /cancel –≤–æ –≤—Ä–µ–º—è ChatGPT-—Ä–µ–∂–∏–º–∞."""
    user = update.effective_user
    logger.info(f"{user.first_name} ({user.id}) –≤—ã—à–µ–ª –∏–∑ ChatGPT")
    await update.message.reply_text("‚ùå –í—ã –≤—ã—à–ª–∏ –∏–∑ —Ä–µ–∂–∏–º–∞ ChatGPT.")
    return ConversationHandler.END
