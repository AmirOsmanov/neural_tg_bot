import logging
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import ContextTypes, ConversationHandler
from services.openai_client import ask_chatgpt
from services.ui import get_main_menu_keyboard

logger = logging.getLogger(__name__)

GPT_MODE = 1

async def start_gpt(update_or_query, context: ContextTypes.DEFAULT_TYPE) -> int:

    if hasattr(update_or_query, "message") and update_or_query.message:
        message = update_or_query.message
        user = update_or_query.effective_user
        chat_id = message.chat_id

        try:
            await context.bot.send_photo(
                chat_id=chat_id,
                photo=open("images/chatgpt.jpg", "rb")
            )
        except Exception as e:
            logger.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å chatgpt.jpg: {e}")

        await context.bot.send_message(
            chat_id=chat_id,
            text="üß† ChatGPT –∞–∫—Ç–∏–≤–µ–Ω.\n\n–ù–∞–ø–∏—à–∏—Ç–µ –≤–∞—à –≤–æ–ø—Ä–æ—Å:",
            parse_mode="HTML"
        )

    else:
        query = update_or_query.callback_query
        await query.answer()
        user = query.from_user
        chat_id = query.from_user.id

        await query.message.delete()

        try:
            await context.bot.send_photo(
                chat_id=chat_id,
                photo=open("images/chatgpt.jpg", "rb")
            )
        except Exception as e:
            logger.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å chatgpt.jpg: {e}")

        await context.bot.send_message(
            chat_id=chat_id,
            text="üß† ChatGPT –∞–∫—Ç–∏–≤–µ–Ω.\n\n–ù–∞–ø–∏—à–∏—Ç–µ –≤–∞—à –≤–æ–ø—Ä–æ—Å:",
            parse_mode="HTML"
        )

    logger.info(f"{user.first_name} ({user.id}) –Ω–∞—á–∞–ª –æ–±—â–µ–Ω–∏–µ —Å ChatGPT")
    return GPT_MODE


async def handle_gpt_message(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    user = update.effective_user
    user_input = update.message.text.strip()
    logger.info(f"{user.first_name} ({user.id}) –Ω–∞–ø–∏—Å–∞–ª: {user_input}")

    try:
        response = await ask_chatgpt([
            {"role": "system", "content": "–¢—ã —É–º–Ω—ã–π –∏ –≤–µ–∂–ª–∏–≤—ã–π –ø–æ–º–æ—â–Ω–∏–∫. –û—Ç–≤–µ—á–∞–π –Ω–∞ —Ä—É—Å—Å–∫–æ–º —è–∑—ã–∫–µ."},
            {"role": "user", "content": user_input}
        ])
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞—â–µ–Ω–∏–∏ –∫ ChatGPT: {e}")
        response = "üòî –ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, –Ω–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –æ—Ç–≤–µ—Ç –æ—Ç ChatGPT. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ."

    keyboard = [[InlineKeyboardButton("üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="gpt_to_menu")]]
    reply_markup = InlineKeyboardMarkup(keyboard)

    await update.message.reply_text(
        response,
        reply_markup=reply_markup
    )

    return GPT_MODE


async def return_to_menu(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    query = update.callback_query
    await query.answer()
    await query.message.edit_text(
        "üéâ <b>–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ ChatGPT –±–æ—Ç–∞!</b>\n\n"
        "–í—ã–±–µ—Ä–∏—Ç–µ –æ–¥–Ω—É –∏–∑ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —Ñ—É–Ω–∫—Ü–∏–π:",
        parse_mode="HTML",
        reply_markup=get_main_menu_keyboard()
    )
    return ConversationHandler.END


async def cancel(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """
    –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /cancel –≤ —Ä–µ–∂–∏–º–µ ChatGPT.
    –ü—Ä–æ—Å—Ç–æ —É–≤–µ–¥–æ–º–ª—è–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏ –∑–∞–≤–µ—Ä—à–∞–µ—Ç —Ä–∞–∑–≥–æ–≤–æ—Ä.
    """
    user = update.effective_user
    logger.info(f"{user.first_name} ({user.id}) –≤—ã—à–µ–ª –∏–∑ —Ä–µ–∂–∏–º–∞ ChatGPT")
    await update.message.reply_text("‚ùå –í—ã –≤—ã—à–ª–∏ –∏–∑ —Ä–µ–∂–∏–º–∞ ChatGPT.")
    return ConversationHandler.END
