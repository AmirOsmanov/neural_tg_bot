"""
handlers.random
===============

–ú–æ–¥—É–ª—å ¬´üß† –†–∞–Ω–¥–æ–º-—Ñ–∞–∫—Ç¬ª.

–ü—Ä–∏ –≤—ã–∑–æ–≤–µ –∫–æ–º–∞–Ω–¥—ã `/random` –∏–ª–∏ –Ω–∞–∂–∞—Ç–∏–∏ –∫–Ω–æ–ø–∫–∏ ¬´üß† –†–∞–Ω–¥–æ–º-—Ñ–∞–∫—Ç¬ª
–±–æ—Ç –∑–∞–ø—Ä–∞—à–∏–≤–∞–µ—Ç —É ChatGPT –∫–æ—Ä–æ—Ç–∫–∏–π (–≤ –æ–¥–Ω—É-–¥–≤–µ —Å—Ç—Ä–æ–∫–∏) –∏–Ω—Ç–µ—Ä–µ—Å–Ω—ã–π
–Ω–∞—É—á–Ω—ã–π —Ñ–∞–∫—Ç, –ø—Ä–µ–¥–≤–∞—Ä—è—é—â–∏–π—Å—è –ø–æ–¥—Ö–æ–¥—è—â–∏–º emoji, –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –µ–≥–æ
–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é. –ü–æ–¥ –æ—Ç–≤–µ—Ç–æ–º –æ—Ç–æ–±—Ä–∞–∂–∞—é—Ç—Å—è –¥–≤–µ inline-–∫–Ω–æ–ø–∫–∏:

* ¬´üß† –ï—â—ë —Ñ–∞–∫—Ç¬ª      ‚Üí –∑–∞–ø—Ä–∞—à–∏–≤–∞–µ—Ç –∏ –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç –Ω–æ–≤—ã–π —Ñ–∞–∫—Ç,
  —Å—Ç–∞—Ä–∞—è—Å—å –æ—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –ø—Ä–µ–¥—ã–¥—É—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ.
* ¬´üîö –ó–∞–∫–æ–Ω—á–∏—Ç—å¬ª     ‚Üí —É–¥–∞–ª—è–µ—Ç –∫–∞—Ä—Ç–æ—á–∫—É —Å–æ —Ñ–∞–∫—Ç–æ–º
  –∏ –æ—Ç–∫—Ä—ã–≤–∞–µ—Ç **–≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é**.

–î–ª—è —Ä–∞–±–æ—Ç—ã –º–æ–¥—É–ª—å –∏—Å–ø–æ–ª—å–∑—É–µ—Ç:
* `services.openai_client.get_random_fact` ‚Äî –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω—É—é –æ–±—ë—Ä—Ç–∫—É
  –Ω–∞–¥ ChatGPT;
* –∫–æ–Ω—Å—Ç–∞–Ω—Ç—É `CB_RANDOM_FACT` –∏–∑ `services.ui` ‚Äî callback-id –≥–ª–∞–≤–Ω–æ–π
  –∫–Ω–æ–ø–∫–∏ ¬´–†–∞–Ω–¥–æ–º-—Ñ–∞–∫—Ç¬ª.
"""

import logging
from telegram import (
    Update,
    InlineKeyboardMarkup as Mk,
    InlineKeyboardButton as Btn,
)
from telegram.ext import (
    ContextTypes,
    CommandHandler,
    CallbackQueryHandler,
)
from telegram.error import BadRequest

from services.openai_client import get_random_fact
from services.ui import CB_RANDOM_FACT

logger = logging.getLogger(__name__)
IMAGE = "images/random.jpg"


def _kb() -> Mk:
    """
        –°—Ñ–æ—Ä–º–∏—Ä–æ–≤–∞—Ç—å inline-–∫–ª–∞–≤–∏–∞—Ç—É—Ä—É, –ø—Ä–∏–∫—Ä–µ–ø–ª—è–µ–º—É—é –∫ –∫–∞–∂–¥–æ–º—É —Ñ–∞–∫—Ç—É.

        –ö–Ω–æ–ø–∫–∏
        -------
        üß† –ï—â—ë —Ñ–∞–∫—Ç   ‚Üí callback-data `random_more`
        üîö –ó–∞–∫–æ–Ω—á–∏—Ç—å  ‚Üí callback-data `random_finish`
    """
    return Mk([
        [Btn("üß† –ï—â—ë —Ñ–∞–∫—Ç",  callback_data="random_more")],
        [Btn("üîö –ó–∞–∫–æ–Ω—á–∏—Ç—å", callback_data="random_finish")],
    ])


async def _send_fact(target, fact: str):
    """
        –ü–æ—Å–ª–∞—Ç—å *–Ω–æ–≤–æ–µ* —Å–æ–æ–±—â–µ–Ω–∏–µ-–∫–∞—Ä—Ç–æ—á–∫—É —Å —Ñ–∞–∫—Ç–æ–º.

        Parameters
        ----------
        target :
            –û–±—ä–µ–∫—Ç, –∏–º–µ—é—â–∏–π –º–µ—Ç–æ–¥ `.send_photo()` (–æ–±—ã—á–Ω–æ —ç–∫–∑–µ–º–ø–ª—è—Ä
            `telegram.Chat` –∏–ª–∏ `telegram.Message`). –ü–æ–∑–≤–æ–ª—è–µ—Ç –æ—Ç–ø—Ä–∞–≤–∏—Ç—å
            –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Å –ø–æ–¥–ø–∏—Å—å—é.
        fact : str
            –¢–µ–∫—Å—Ç —Ñ–∞–∫—Ç–∞ (‚â§ 1024 —Å–∏–º–≤–æ–ª–æ–≤) —É–∂–µ –ø–æ–ª—É—á–µ–Ω–Ω—ã–π –æ—Ç ChatGPT.
    """
    await target.send_photo(
        IMAGE,
        caption=fact[:1024],
        reply_markup=_kb(),
        parse_mode="Markdown",
    )
    logger.info("–§–∞–∫—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω")


async def random_fact(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """
        –¢–æ—á–∫–∞ –≤—Ö–æ–¥–∞: –∫–æ–º–∞–Ω–¥–∞ `/random` **–∏–ª–∏** –∫–Ω–æ–ø–∫–∞ –∏–∑ –≥–ª–∞–≤–Ω–æ–≥–æ –º–µ–Ω—é.

        ‚Ä¢ –ï—Å–ª–∏ –≤—ã–∑–æ–≤ –ø—Ä–∏—à—ë–ª –æ—Ç callback-–∫–Ω–æ–ø–∫–∏, —Å–Ω–∞—á–∞–ª–∞ –æ—Ç–≤–µ—á–∞–µ–º –Ω–∞ query
          (`await .answer()`) –∏ –∏—Å–ø–æ–ª—å–∑—É–µ–º `update.effective_chat` –¥–ª—è
          –æ—Ç–ø—Ä–∞–≤–∫–∏ –Ω–æ–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è.
        ‚Ä¢ –í –æ—Å—Ç–∞–ª—å–Ω—ã—Ö —Å–ª—É—á–∞—è—Ö –∏—Å–ø–æ–ª—å–∑—É–µ–º `update.effective_message`.
    """
    if update.callback_query:
        await update.callback_query.answer()
        target_chat = update.effective_chat
    else:
        target_chat = update.effective_message

    await _send_fact(target_chat, await get_random_fact())


async def buttons(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """
        –£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—ã–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–≤—É—Ö callback-–∫–Ω–æ–ø–æ–∫ –ø–æ–¥ —Ñ–∞–∫—Ç–æ–º.

        * `random_more`   ‚Üí –≤—ã—Ç—è–≥–∏–≤–∞–µ—Ç –Ω–æ–≤—ã–π —Ñ–∞–∫—Ç –∏–∑ OpenAI –∏, –ø–æ
          –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏, **—Ä–µ–¥–∞–∫—Ç–∏—Ä—É–µ—Ç** –ø–æ–¥–ø–∏—Å—å —Ç–µ–∫—É—â–µ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è
          (`edit_message_caption`).
          –ï—Å–ª–∏ Telegram –Ω–µ –ø–æ–∑–≤–æ–ª—è–µ—Ç —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å (—á–∞—Å—Ç–æ –∏–∑-–∑–∞
          –ø—Ä–µ–≤—ã—à–µ–Ω–∏—è –ª–∏–º–∏—Ç–∞ 1-–º–∏–Ω—É—Ç—ã), –ø—Ä–æ—Å—Ç–æ —É–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –∏
          –ø—Ä–∏—Å—ã–ª–∞–µ–º –Ω–æ–≤–æ–µ, —á—Ç–æ–±—ã –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å –æ—Å—Ç–∞–≤–∞–ª—Å—è —á–∏—Å—Ç—ã–º.
        * `random_finish` ‚Üí —É–¥–∞–ª—è–µ—Ç –∫–∞—Ä—Ç–æ—á–∫—É —Å —Ñ–∞–∫—Ç–æ–º –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç
          –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é (`handlers.basic.show_main_menu`).
    """
    q = update.callback_query
    await q.answer()

    if q.data == "random_more":
        fact = await get_random_fact()
        try:
            await q.edit_message_caption(fact, reply_markup=_kb(),
                                         parse_mode="Markdown")
        except BadRequest:
            await q.message.delete()
            await _send_fact(q.message, fact)
        return

    await q.message.delete()
    from handlers.basic import show_main_menu
    await show_main_menu(update, context)


def register_handlers(app):
    app.add_handler(CommandHandler("random", random_fact))
    app.add_handler(CallbackQueryHandler(random_fact,
                                         pattern=f"^{CB_RANDOM_FACT}$"))
    app.add_handler(CallbackQueryHandler(buttons,
                                         pattern="^random_(more|finish)$"))
