import logging
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import ContextTypes
from services.openai_client import get_random_fact
from services.ui import get_main_menu_keyboard

logger = logging.getLogger(__name__)


async def random_fact(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã /random"""
    user = update.effective_user
    logger.info(f"{user.first_name} ({user.id}) –≤—ã–∑–≤–∞–ª –∫–æ–º–∞–Ω–¥—É /random")
    # –ü–µ—Ä–µ–¥–∞—ë–º –≤ send_fact: Message, context –∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    await send_fact(update.message, context, user)


async def random_fact_callback(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–∞–∂–∞—Ç–∏–π –∫–Ω–æ–ø–æ–∫ –¥–ª—è —Ä–∞–Ω–¥–æ–º–Ω—ã—Ö —Ñ–∞–∫—Ç–æ–≤"""
    query = update.callback_query
    await query.answer()
    user = query.from_user
    logger.info(f"{user.first_name} ({user.id}) –Ω–∞–∂–∞–ª –∫–Ω–æ–ø–∫—É: {query.data}")

    # –°–Ω–∞—á–∞–ª–∞ —É–¥–∞–ª—è–µ–º –ø—Ä–µ–¥—ã–¥—É—â—É—é —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—é, –µ—Å–ª–∏ –æ–Ω–∞ —Å–æ—Ö—Ä–∞–Ω–∏–ª–∞—Å—å
    last_photo_id = context.user_data.get("last_fact_photo_id")
    if last_photo_id:
        try:
            await context.bot.delete_message(chat_id=user.id, message_id=last_photo_id)
        except Exception:
            pass
        # –û—á–∏—Å—Ç–∏–º —Ö—Ä–∞–Ω–∏–ª–∏—â–µ
        context.user_data.pop("last_fact_photo_id", None)

    if query.data in ["random_more", "random_fact"]:
        # –ü–µ—Ä–µ–¥–∞—ë–º –≤ send_fact: CallbackQuery, context –∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        await send_fact(query, context, user)

    elif query.data == "random_finish":
        reply_markup = get_main_menu_keyboard()
        await query.edit_message_text(
            "üéâ <b>–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ ChatGPT –±–æ—Ç–∞!</b>\n\n"
            "–í—ã–±–µ—Ä–∏—Ç–µ –æ–¥–Ω—É –∏–∑ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —Ñ—É–Ω–∫—Ü–∏–π:",
            parse_mode='HTML',
            reply_markup=reply_markup
        )


async def send_fact(query_or_message, context: ContextTypes.DEFAULT_TYPE, user):
    """
    –û–±—â–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∏ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Ñ–∞–∫—Ç–∞ —Å –∫–∞—Ä—Ç–∏–Ω–∫–æ–π —Å–≤–µ—Ä—Ö—É.
    query_or_message –º–æ–∂–µ—Ç –±—ã—Ç—å –ª–∏–±–æ Message, –ª–∏–±–æ CallbackQuery.
    """
    try:
        # 1) –ï—Å–ª–∏ —É –æ–±—ä–µ–∫—Ç–∞ –µ—Å—Ç—å –º–µ—Ç–æ–¥ `reply_text`, —Å—á–∏—Ç–∞–µ–º, —á—Ç–æ —ç—Ç–æ Message
        if hasattr(query_or_message, "reply_text"):
            # 1.1) –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∫–∞—Ä—Ç–∏–Ω–∫—É random.jpg –∏ —Å–æ—Ö—Ä–∞–Ω—è–µ–º –µ—ë message_id
            with open("images/random.jpg", "rb") as img:
                photo_msg = await query_or_message.reply_photo(photo=img)
            context.user_data["last_fact_photo_id"] = photo_msg.message_id

            # 1.2) –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ç–µ–∫—Å—Ç ¬´–ì–µ–Ω–µ—Ä–∏—Ä—É—é —Ñ–∞–∫—Ç...¬ª
            loading_msg = await query_or_message.reply_text("üé≤ –ì–µ–Ω–µ—Ä–∏—Ä—É—é –∏–Ω—Ç–µ—Ä–µ—Å–Ω—ã–π —Ñ–∞–∫—Ç... ‚è≥")

        else:
            # 2) –ò–Ω–∞—á–µ —Å—á–∏—Ç–∞–µ–º, —á—Ç–æ —ç—Ç–æ CallbackQuery
            query = query_or_message  # —è–≤–Ω–æ –Ω–∞–∑—ã–≤–∞–µ–º
            # 2.1) –£–¥–∞–ª—è–µ–º –ø—Ä–µ–¥—ã–¥—É—â–µ–µ —Ç–µ–∫—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ (–æ–Ω–æ —É–∂–µ –Ω–µ –∞–∫—Ç—É–∞–ª—å–Ω–æ)
            await query.message.delete()

            # 2.2) –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∫–∞—Ä—Ç–∏–Ω–∫—É –∏ —Å–æ—Ö—Ä–∞–Ω—è–µ–º –µ—ë message_id
            with open("images/random.jpg", "rb") as img:
                photo_msg = await context.bot.send_photo(chat_id=user.id, photo=img)
            context.user_data["last_fact_photo_id"] = photo_msg.message_id

            # 2.3) –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ç–µ–∫—Å—Ç ¬´–ì–µ–Ω–µ—Ä–∏—Ä—É—é —Ñ–∞–∫—Ç...¬ª
            loading_msg = await context.bot.send_message(
                chat_id=user.id,
                text="üé≤ –ì–µ–Ω–µ—Ä–∏—Ä—É—é –∏–Ω—Ç–µ—Ä–µ—Å–Ω—ã–π —Ñ–∞–∫—Ç... ‚è≥"
            )

        # 3) –ñ–¥—ë–º –æ—Ç–≤–µ—Ç –æ—Ç OpenAI
        fact = await get_random_fact()

        # 4) –§–æ—Ä–º–∏—Ä—É–µ–º keyboard —Å –∫–Ω–æ–ø–∫–∞–º–∏ ¬´–•–æ—á—É –µ—â—ë —Ñ–∞–∫—Ç¬ª –∏ ¬´–ó–∞–∫–æ–Ω—á–∏—Ç—å¬ª
        keyboard = [
            [InlineKeyboardButton("üé≤ –•–æ—á—É –µ—â—ë —Ñ–∞–∫—Ç", callback_data="random_more")],
            [InlineKeyboardButton("üè† –ó–∞–∫–æ–Ω—á–∏—Ç—å", callback_data="random_finish")]
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)

        # 5) –†–µ–¥–∞–∫—Ç–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ loading_msg —Ç–µ–∫—Å—Ç–æ–º —Ñ–∞–∫—Ç–∞ –∏ –ø—Ä–∏–∫—Ä–µ–ø–ª—è–µ–º –∫–Ω–æ–ø–∫–∏
        await loading_msg.edit_text(
            f"üß† <b>–ò–Ω—Ç–µ—Ä–µ—Å–Ω—ã–π —Ñ–∞–∫—Ç:</b>\n\n{fact}",
            parse_mode='HTML',
            reply_markup=reply_markup
        )

        logger.info(f"{user.first_name} ({user.id}) –ø–æ–ª—É—á–∏–ª —Ñ–∞–∫—Ç")

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Ñ–∞–∫—Ç–∞: {e}")
        # –ï—Å–ª–∏ —É–ø–∞–ª–æ –Ω–∞ –ª—é–±–æ–º —à–∞–≥–µ ‚Äî —Å–æ–æ–±—â–∞–µ–º –æ–± –æ—à–∏–±–∫–µ
        if hasattr(query_or_message, "edit_message_text"):
            # –≠—Ç–æ CallbackQuery (—Ä–µ–¥–∞–∫—Ç–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç –æ—Ä–∏–≥–∏–Ω–∞–ª–∞)
            await query_or_message.edit_message_text(
                "üòî –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.\n"
                "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /start —á—Ç–æ–±—ã –≤–µ—Ä–Ω—É—Ç—å—Å—è –≤ –º–µ–Ω—é."
            )
        else:
            # –≠—Ç–æ Message (–ø—Ä–æ—Å—Ç–æ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤—ã–π —Ç–µ–∫—Å—Ç)
            await query_or_message.reply_text(
                "üòî –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.\n"
                "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /start —á—Ç–æ–±—ã –≤–µ—Ä–Ω—É—Ç—å—Å—è –≤ –º–µ–Ω—é."
            )
