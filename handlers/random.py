"""–§–∞–π–ª —Å —Ö–µ–Ω–¥–ª–µ—Ä–∞–º–∏ –¥–ª—è ¬´–†–∞–Ω–¥–æ–º–Ω–æ–≥–æ —Ñ–∞–∫—Ç–∞¬ª."""

import logging
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import ContextTypes
from services.ui import get_main_menu_keyboard
from services.openai_client import get_random_fact

logger = logging.getLogger(__name__)


async def random_fact(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã /random."""
    user = update.effective_user
    logger.info(f"{user.first_name} ({user.id}) –≤—ã–∑–≤–∞–ª –∫–æ–º–∞–Ω–¥—É /random")
    await send_fact(update.message, user)


async def random_fact_callback(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–∞–∂–∞—Ç–∏–π –∫–Ω–æ–ø–æ–∫ –¥–ª—è ¬´–†–∞–Ω–¥–æ–º–Ω–æ–≥–æ —Ñ–∞–∫—Ç–∞¬ª."""
    query = update.callback_query
    await query.answer()
    user = query.from_user
    logger.info(f"{user.first_name} ({user.id}) –Ω–∞–∂–∞–ª –∫–Ω–æ–ø–∫—É: {query.data}")

    # 1) –ò ¬´random_fact¬ª (–ø–µ—Ä–≤—ã–π –∑–∞–ø—É—Å–∫), –∏ ¬´random_more¬ª ‚Äî –ø—Ä–æ—Å—Ç–æ –ø–µ—Ä–µ—Å—ã–ª–∞–µ–º —Ñ–∞–∫—Ç
    if query.data in ["random_fact", "random_more"]:
        await send_fact(query, user)

    # 2) –ï—Å–ª–∏ –Ω–∞–∂–∞–ª–∏ ¬´random_finish¬ª ‚Äî –≤–µ—Ä–Ω—É—Ç—å—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
    elif query.data == "random_finish":
        reply_markup = get_main_menu_keyboard()
        await query.edit_message_text(
            "üéâ <b>–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ ChatGPT –±–æ—Ç–∞!</b>\n\n"
            "–í—ã–±–µ—Ä–∏—Ç–µ –æ–¥–Ω—É –∏–∑ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —Ñ—É–Ω–∫—Ü–∏–π:",
            parse_mode="HTML",
            reply_markup=reply_markup,
        )


async def send_fact(query_or_message, user):
    """–û–±—â–∞—è —Å–ª—É–∂–µ–±–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è: –∑–∞–ø—Ä–æ—Å –∫ OpenAI + –æ—Ç–ø—Ä–∞–≤–∫–∞."""
    try:
        # 1) –ï—Å–ª–∏ query_or_message ‚Äî CallbackQuery (—É –Ω–µ–≥–æ –µ—Å—Ç—å –º–µ—Ç–æ–¥ edit_message_text)
        if hasattr(query_or_message, "edit_message_text"):
            await query_or_message.edit_message_text("üé≤ –ì–µ–Ω–µ—Ä–∏—Ä—É—é –∏–Ω—Ç–µ—Ä–µ—Å–Ω—ã–π —Ñ–∞–∫—Ç... ‚è≥")
        else:
            # 2) –ò–Ω–∞—á–µ, —ç—Ç–æ —Ç–µ–∫—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ (CommandHandler "/random")
            await query_or_message.reply_text("üé≤ –ì–µ–Ω–µ—Ä–∏—Ä—É—é –∏–Ω—Ç–µ—Ä–µ—Å–Ω—ã–π —Ñ–∞–∫—Ç... ‚è≥")

        # 3) –ü–æ–ª—É—á–∞–µ–º —Ñ–∞–∫—Ç –æ—Ç OpenAI
        fact = await get_random_fact()

        # 4) –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ ¬´–µ—â–µ —Ñ–∞–∫—Ç¬ª / ¬´–∑–∞–∫–æ–Ω—á–∏—Ç—å¬ª
        keyboard = [
            [InlineKeyboardButton("üé≤ –•–æ—á—É –µ—â—ë —Ñ–∞–∫—Ç", callback_data="random_more")],
            [InlineKeyboardButton("üè† –ó–∞–∫–æ–Ω—á–∏—Ç—å", callback_data="random_finish")],
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)

        # 5) –†–µ–¥–∞–∫—Ç–∏—Ä—É–µ–º (–∏–ª–∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º) —Ç–µ–∫—Å—Ç —Å —Ñ–∞–∫—Ç–æ–º
        await query_or_message.edit_message_text(
            f"üß† <b>–ò–Ω—Ç–µ—Ä–µ—Å–Ω—ã–π —Ñ–∞–∫—Ç:</b>\n\n{fact}",
            parse_mode="HTML",
            reply_markup=reply_markup,
        )
        logger.info(f"{user.first_name} ({user.id}) –ø–æ–ª—É—á–∏–ª —Ñ–∞–∫—Ç")

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Ñ–∞–∫—Ç–∞: {e}")
        await query_or_message.edit_message_text(
            "üòî –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.\n"
            "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /start, —á—Ç–æ–±—ã –≤–µ—Ä–Ω—É—Ç—å—Å—è –≤ –º–µ–Ω—é."
        )
