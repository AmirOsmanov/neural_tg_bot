"""
handlers.quiz
=============

–î–∏–Ω–∞–º–∏—á–µ—Å–∫–∏–π ¬´–ö–≤–∏–∑¬ª (–≤–∏–∫—Ç–æ—Ä–∏–Ω–∞), –≤ –∫–æ—Ç–æ—Ä–æ–π –≤–æ–ø—Ä–æ—Å—ã –Ω–∞ –ª–µ—Ç—É
–≥–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç ChatGPT.

–ê–ª–≥–æ—Ä–∏—Ç–º —Ä–∞–±–æ—Ç—ã –º–æ–¥—É–ª—è
----------------------
1. –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤—ã–∑—ã–≤–∞–µ—Ç `/quiz` **–∏–ª–∏** –Ω–∞–∂–∏–º–∞–µ—Ç –∫–Ω–æ–ø–∫—É ¬´‚ùì –ö–≤–∏–∑¬ª
   –≤ –≥–ª–∞–≤–Ω–æ–º –º–µ–Ω—é.
2. –ë–æ—Ç—É –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç—Å—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ-–æ–±–ª–æ–∂–∫–∞ –∏ –∫–ª–∞–≤–∏–∞—Ç—É—Ä–∞ —Å –≤—ã–±–æ—Ä–æ–º —Ç–µ–º—ã.
3. –ü–æ—Å–ª–µ –≤—ã–±–æ—Ä–∞ —Ç–µ–º—ã –±–æ—Ç –∑–∞–ø—Ä–∞—à–∏–≤–∞–µ—Ç —É ChatGPT –æ–¥–∏–Ω –≤–æ–ø—Ä–æ—Å
   (`services.openai_client.get_quiz_question`) –∏ –ø—Ä–µ–¥–ª–∞–≥–∞–µ—Ç —Ç—Ä–∏ –≤–∞—Ä–∏–∞–Ω—Ç–∞ –æ—Ç–≤–µ—Ç–∞.
4. –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤—ã–±–∏—Ä–∞–µ—Ç –≤–∞—Ä–∏–∞–Ω—Ç:
   ‚Ä¢ –±–æ—Ç —Å–æ–æ–±—â–∞–µ—Ç, –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –ª–∏ –æ—Ç–≤–µ—Ç;
   ‚Ä¢ –ø—Ä–µ–¥–ª–∞–≥–∞–µ—Ç ¬´‚ûï –ï—â—ë –≤–æ–ø—Ä–æ—Å¬ª (—Ç–∞ –∂–µ —Ç–µ–º–∞) –∏–ª–∏ ¬´üîô –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é¬ª.
5. –ü—Ä–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –º–æ–∂–µ—Ç –≤–µ—Ä–Ω—É—Ç—å—Å—è –≤ –º–µ–Ω—é –∏ –Ω–∞—á–∞—Ç—å —Å–Ω–∞—á–∞–ª–∞.

–í–Ω—É—Ç—Ä–∏ —Ä–µ–∞–ª–∏–∑–æ–≤–∞–Ω–æ –¥–≤–∞ —Å–æ—Å—Ç–æ—è–Ω–∏—è ConversationHandler:

* **TOPIC**  ‚Äì –≤—ã–±–æ—Ä —Ç–µ–º—ã;
* **ASK**    ‚Äì –ø–æ–∫–∞–∑ –≤–æ–ø—Ä–æ—Å–∞ –∏ –æ–∂–∏–¥–∞–Ω–∏–µ –æ—Ç–≤–µ—Ç–∞.
"""

from __future__ import annotations
import logging
from telegram import (
    Update, InlineKeyboardMarkup as Mk, InlineKeyboardButton as Btn,
)
from telegram.ext import (
    ContextTypes, ConversationHandler,
    CommandHandler, CallbackQueryHandler,
)
from services.ui import CB_QUIZ_RUN
from services.openai_client import get_quiz_question

logger = logging.getLogger(__name__)
IMAGE = "images/quiz.jpg"

TOPIC, ASK = range(2)

TOPICS = {
    "hist": "–ò—Å—Ç–æ—Ä–∏—è",
    "sci":  "–ù–∞—É–∫–∞",
    "mov":  "–ö–∏–Ω–æ",
}

def _topics_kb() -> Mk:
    """
        –°—Ñ–æ—Ä–º–∏—Ä–æ–≤–∞—Ç—å –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –≤—ã–±–æ—Ä–∞ —Ç–µ–º—ã –≤–∏–∫—Ç–æ—Ä–∏–Ω—ã.

        Returns
        -------
        telegram.InlineKeyboardMarkup
            –ö–Ω–æ–ø–∫–∏-—Å—Ç—Ä–æ–∫–∏ –≤–∏–¥–∞ ¬´–ò—Å—Ç–æ—Ä–∏—è¬ª, ¬´–ù–∞—É–∫–∞¬ª, ‚Ä¶ —Å callback-–¥–∞—Ç–æ–π
            `quiz_topic:<–∫–æ–¥_—Ç–µ–º—ã>`.
    """
    return Mk([
        [Btn(name, callback_data=f"quiz_topic:{code}")]
        for code, name in TOPICS.items()
    ])


def _ans_kb(topic: str, q_id: int, options: list[str]) -> Mk:
    """
        –°–æ–∑–¥–∞—Ç—å –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –≤–∞—Ä–∏–∞–Ω—Ç–∞–º–∏ –æ—Ç–≤–µ—Ç–∞ –Ω–∞ –≤–æ–ø—Ä–æ—Å.

        Parameters
        ----------
        topic : str
            –ö–æ–¥ –≤—ã–±—Ä–∞–Ω–Ω–æ–π —Ç–µ–º—ã (hist/sci/mov) ‚Äî –Ω—É–∂–µ–Ω, —á—Ç–æ–±—ã –∑–∞—Ç–µ–º
            –∑–∞–¥–∞–≤–∞—Ç—å –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –≤–æ–ø—Ä–æ—Å—ã —Ç–æ–π –∂–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏.
        q_id : int
            –ü—Ä–æ–∏–∑–≤–æ–ª—å–Ω—ã–π –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä –≤–æ–ø—Ä–æ—Å–∞ (–∏—Å–ø–æ–ª—å–∑—É–µ–º `id(text)`),
            –≤–∫–ª—é—á–∞–µ—Ç—Å—è –≤ callback-data, —á—Ç–æ–±—ã —Ä–∞–∑–ª–∏—á–∞—Ç—å —Ä–∞–∑–Ω—ã–µ –≤–æ–ø—Ä–æ—Å—ã.
        options : list[str]
            –°–ø–∏—Å–æ–∫ –∏–∑ —Ç—Ä—ë—Ö —Å—Ç—Ä–æ–∫-–≤–∞—Ä–∏–∞–Ω—Ç–æ–≤ –æ—Ç–≤–µ—Ç–∞.

        Returns
        -------
        telegram.InlineKeyboardMarkup
            –¢—Ä–∏ –≤–µ—Ä—Ç–∏–∫–∞–ª—å–Ω—ã–µ –∫–Ω–æ–ø–∫–∏-–≤–∞—Ä–∏–∞–Ω—Ç–∞ (`quiz_ans:<q_id>:<idx>`).
    """
    return Mk([
        [Btn(txt, callback_data=f"quiz_ans:{q_id}:{i}")]
        for i, txt in enumerate(options)
    ])


def _after_kb(topic: str) -> Mk:
    """
        –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞, –ø–æ–∫–∞–∑—ã–≤–∞–µ–º–∞—è –ø–æ—Å–ª–µ –æ—Ç–≤–µ—Ç–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.

        Parameters
        ----------
        topic : str
            –ö–æ–¥ —Ç–µ–∫—É—â–µ–π —Ç–µ–º—ã, —á—Ç–æ–±—ã ¬´‚ûï –ï—â—ë –≤–æ–ø—Ä–æ—Å¬ª –æ—Å—Ç–∞–≤–∞–ª—Å—è –≤ —Ä–∞–º–∫–∞—Ö
            —Ç–æ–≥–æ –∂–µ —Ä–∞–∑–¥–µ–ª–∞.

        Returns
        -------
        telegram.InlineKeyboardMarkup
            ‚Ä¢ ¬´‚ûï –ï—â—ë –≤–æ–ø—Ä–æ—Å¬ª (`quiz_next:<topic>`)
            ‚Ä¢ ¬´üîô –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é¬ª (`quiz_finish`)
    """
    return Mk([
        [Btn("‚ûï –ï—â—ë –≤–æ–ø—Ä–æ—Å", callback_data=f"quiz_next:{topic}")],
        [Btn("üîô –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="quiz_finish")],
    ])


async def start_quiz_command(update: Update,
                             context: ContextTypes.DEFAULT_TYPE) -> int:
    """
        –¢–æ—á–∫–∞ –≤—Ö–æ–¥–∞ –¥–ª—è `/quiz` –∏–ª–∏ –∫–Ω–æ–ø–∫–∏ –∏–∑ –≥–ª–∞–≤–Ω–æ–≥–æ –º–µ–Ω—é.

        –ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –æ–±–ª–æ–∂–∫—É –∏ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å —Ç–µ–º–∞–º–∏ –≤–∏–∫—Ç–æ—Ä–∏–Ω—ã.

        Returns
        -------
        int
            –°–æ—Å—Ç–æ—è–Ω–∏–µ **TOPIC** (–æ–∂–∏–¥–∞–µ–º –≤—ã–±–æ—Ä —Ç–µ–º—ã).
    """
    if update.callback_query:
        await update.callback_query.answer()
        await update.callback_query.message.delete()
    await update.effective_message.reply_photo(
        IMAGE,
        caption="üìö –í—ã–±–µ—Ä–∏—Ç–µ —Ç–µ–º—É –∫–≤–∏–∑–∞:",
        reply_markup=_topics_kb(),
    )
    return TOPIC


async def choose_topic(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """
        –û–±—Ä–∞–±–æ—Ç–∞—Ç—å –∫–Ω–æ–ø–∫—É –≤—ã–±–æ—Ä–∞ —Ç–µ–º—ã.

        –°–æ—Ö—Ä–∞–Ω—è–µ—Ç –≤—ã–±—Ä–∞–Ω–Ω—ã–π `topic_code` –≤ `context.user_data`
        –∏ —Å—Ä–∞–∑—É –∂–µ –≥–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –ø–µ—Ä–≤—ã–π –≤–æ–ø—Ä–æ—Å, –≤—ã–∑—ã–≤–∞—è `_ask_question`.

        Returns
        -------
        int
            –°–æ—Å—Ç–æ—è–Ω–∏–µ **ASK** (–ø–æ–∫–∞–∑ –≤–æ–ø—Ä–æ—Å–∞).
    """
    q = update.callback_query
    await q.answer()
    topic_code = q.data.split(":")[1]
    context.user_data["topic"] = topic_code
    return await _ask_question(q, context)


async def _ask_question(target, context) -> int:
    """
        –ó–∞–ø—Ä–æ—Å–∏—Ç—å —É ChatGPT –≤–æ–ø—Ä–æ—Å –∏ –æ—Ç–æ–±—Ä–∞–∑–∏—Ç—å –µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é.

        Parameters
        ----------
        target : telegram.CallbackQuery | telegram.Message
            –û–±—ä–µ–∫—Ç, —Å –ø–æ–º–æ—â—å—é –∫–æ—Ç–æ—Ä–æ–≥–æ —Å–ª–µ–¥—É–µ—Ç –æ—Ç–ø—Ä–∞–≤–∏—Ç—å/–æ—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å
            —Å–æ–æ–±—â–µ–Ω–∏–µ (–º–æ–∂–µ—Ç –±—ã—Ç—å –∫–∞–∫ `CallbackQuery`, —Ç–∞–∫ –∏ `Message`).
        context : telegram.ext.CallbackContext
            PTB-–∫–æ–Ω—Ç–µ–∫—Å—Ç; –∏—Å–ø–æ–ª—å–∑—É—é—Ç—Å—è `context.user_data['topic']`
            –∏ –∑–∞–ø–∏—Å—å –ø—Ä–∞–≤–∏–ª—å–Ω–æ–≥–æ –æ—Ç–≤–µ—Ç–∞ –≤ `context.user_data['right']`.

        Returns
        -------
        int
            –°–æ—Å—Ç–æ—è–Ω–∏–µ **ASK** ‚Äî –æ—Å—Ç–∞—ë–º—Å—è –Ω–∞ —ç—Ç–∞–ø–µ –æ—Ç–≤–µ—Ç–æ–≤.
    """
    topic_code = context.user_data["topic"]
    topic_ru   = TOPICS[topic_code]

    q_text, options, right = await get_quiz_question(topic_ru)

    context.user_data["right"] = right

    kb = _ans_kb(topic_code, id(q_text), options)

    try:
        await target.edit_message_caption(q_text, reply_markup=kb)
    except Exception:                               # noqa: BLE001
        await target.message.reply_photo(IMAGE, caption=q_text, reply_markup=kb)

    return ASK


async def handle_answer(update: Update,
                        context: ContextTypes.DEFAULT_TYPE) -> int:
    """
        –û–±—Ä–∞–±–æ—Ç–∞—Ç—å –≤—ã–±–æ—Ä –≤–∞—Ä–∏–∞–Ω—Ç–∞ –æ—Ç–≤–µ—Ç–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º.

        ‚Ä¢ –°—Ä–∞–≤–Ω–∏–≤–∞–µ—Ç –≤—ã–±—Ä–∞–Ω–Ω—ã–π –∏–Ω–¥–µ–∫—Å —Å —Å–æ—Ö—Ä–∞–Ω—ë–Ω–Ω—ã–º `right`.
        ‚Ä¢ –°–æ–æ–±—â–∞–µ—Ç ¬´‚úÖ –í–µ—Ä–Ω–æ!¬ª –∏–ª–∏ ¬´‚ùå –ù–µ–≤–µ—Ä–Ω–æ!¬ª.
        ‚Ä¢ –ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É `_after_kb()`.

        Returns
        -------
        int
            –°–æ—Å—Ç–æ—è–Ω–∏–µ **ASK** ‚Äî –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –º–æ–∂–µ—Ç –∑–∞–ø—Ä–æ—Å–∏—Ç—å –Ω–æ–≤—ã–π –≤–æ–ø—Ä–æ—Å
            —Ç–æ–π –∂–µ —Ç–µ–º—ã –∏–ª–∏ –≤–µ—Ä–Ω—É—Ç—å—Å—è –≤ –º–µ–Ω—é.
    """
    q = update.callback_query
    await q.answer()

    chosen = int(q.data.split(":")[-1])
    right  = context.user_data.get("right", -1)

    msg = "‚úÖ –í–µ—Ä–Ω–æ!" if chosen == right else "‚ùå –ù–µ–≤–µ—Ä–Ω–æ!"
    topic_code = context.user_data["topic"]
    await q.message.reply_text(msg, reply_markup=_after_kb(topic_code))
    return ASK


async def next_or_finish(update: Update,
                         context: ContextTypes.DEFAULT_TYPE) -> int:
    """
        –ü–µ—Ä–µ–∫–ª—é—á–∞—Ç–µ–ª—å –º–µ–∂–¥—É ¬´‚ûï –ï—â—ë –≤–æ–ø—Ä–æ—Å¬ª –∏ ¬´üîô –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é¬ª.

        ‚Ä¢ –ï—Å–ª–∏ callback-data –Ω–∞—á–∏–Ω–∞–µ—Ç—Å—è —Å `quiz_next:` ‚Äî
          –∑–∞–ø—É—Å–∫–∞–µ–º `_ask_question` –¥–ª—è —Ç–æ–π –∂–µ —Ç–µ–º—ã.
        ‚Ä¢ –ò–Ω–∞—á–µ (`quiz_finish`) –≤—ã—Ö–æ–¥–∏–º –∏–∑ ConversationHandler
          –∏ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é.

        Returns
        -------
        int
            –õ–∏–±–æ **ASK** (–Ω–æ–≤—ã–π –≤–æ–ø—Ä–æ—Å), –ª–∏–±–æ `ConversationHandler.END`.
    """
    q = update.callback_query
    await q.answer()

    if q.data.startswith("quiz_next:"):
        return await _ask_question(q, context)

    from handlers.basic import show_main_menu
    await show_main_menu(update, context)
    return ConversationHandler.END


def build_quiz_handler() -> ConversationHandler:
    return ConversationHandler(
        entry_points=[
            CommandHandler("quiz", start_quiz_command),
            CallbackQueryHandler(start_quiz_command, pattern=f"^{CB_QUIZ_RUN}$"),
        ],
        states={
            TOPIC: [CallbackQueryHandler(choose_topic, pattern="^quiz_topic:")],
            ASK: [
                CallbackQueryHandler(handle_answer, pattern="^quiz_ans:"),
                CallbackQueryHandler(next_or_finish,
                                     pattern="^quiz_(next|finish)"),
            ],
        },
        fallbacks=[],
        per_chat=True, per_user=False, per_message=False,
    )
