# handlers/talk.py

import logging
from telegram import Update
from telegram.ext import ContextTypes, ConversationHandler
from services.openai_client import ask_chatgpt
from services.ui import get_persona_keyboard, get_end_talk_keyboard, get_main_menu_keyboard

logger = logging.getLogger(__name__)

# ‚îÄ‚îÄ‚îÄ –°–æ—Å—Ç–æ—è–Ω–∏—è ConversationHandler ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
TALK_PERSONA, TALK_MODE = range(2)

# –°–ª–æ–≤–∞—Ä—å —Å —Å–∏—Å—Ç–µ–º–Ω—ã–º–∏ –ø—Ä–æ–º–ø—Ç–∞–º–∏ –¥–ª—è –∫–∞–∂–¥–æ–π –ª–∏—á–Ω–æ—Å—Ç–∏
PERSONA_PROMPTS = {
    "persona_einstein": (
        "–¢—ã –ê–ª—å–±–µ—Ä—Ç –≠–π–Ω—à—Ç–µ–π–Ω ‚Äî –≤–µ–ª–∏—á–∞–π—à–∏–π —Ñ–∏–∑–∏–∫-—Ç–µ–æ—Ä–µ—Ç–∏–∫. "
        "–û—Ç–≤–µ—á–∞–π –≤ –µ–≥–æ —Å—Ç–∏–ª–µ: –∫—Ä–∞—Ç–∫–æ, —É–º–Ω–æ, —Å –Ω–æ—Ç–∫–æ–π —é–º–æ—Ä–∞, –Ω–∞ —Ä—É—Å—Å–∫–æ–º —è–∑—ã–∫–µ."
    ),
    "persona_oppenheimer": (
        "–¢—ã –î–∂. –†. –û–ø–µ–Ω–≥–µ–π–º–µ—Ä ‚Äî –∞–º–µ—Ä–∏–∫–∞–Ω—Å–∫–∏–π —Ñ–∏–∑–∏–∫, ¬´–æ—Ç–µ—Ü –∞—Ç–æ–º–Ω–æ–π –±–æ–º–±—ã¬ª. "
        "–û—Ç–≤–µ—á–∞–π –∫–∞–∫ –û–ø–ø–µ–Ω–≥–µ–π–º–µ—Ä: –≤–¥—É–º—á–∏–≤–æ, –Ω–µ–º–Ω–æ–≥–æ —Ñ–∏–ª–æ—Å–æ—Ñ—Å–∫–∏, –Ω–∞ —Ä—É—Å—Å–∫–æ–º —è–∑—ã–∫–µ."
    ),
    "persona_kurchatov": (
        "–¢—ã –ò–≥–æ—Ä—å –í–∞—Å–∏–ª—å–µ–≤–∏—á –ö—É—Ä—á–∞—Ç–æ–≤ ‚Äî —Å–æ–≤–µ—Ç—Å–∫–∏–π —É—á—ë–Ω—ã–π-—Ñ–∏–∑–∏–∫, —Ä—É–∫–æ–≤–æ–¥–∏—Ç–µ–ª—å —è–¥–µ—Ä–Ω–æ–≥–æ –ø—Ä–æ–µ–∫—Ç–∞ –°–°–°–†. "
        "–û—Ç–≤–µ—á–∞–π –∫–∞–∫ –ö—É—Ä—á–∞—Ç–æ–≤: —Å–µ—Ä—å—ë–∑–Ω–æ, –ø–æ –¥–µ–ª—É, –Ω–∞ —Ä—É—Å—Å–∫–æ–º —è–∑—ã–∫–µ."
    ),
}


async def start_talk(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """
    –ó–∞–ø—É—Å–∫ –¥–∏–∞–ª–æ–≥–∞ —Å –ª–∏—á–Ω–æ—Å—Ç—å—é:
    1) –ï—Å–ª–∏ –≤—ã–∑–≤–∞–Ω–æ —á–µ—Ä–µ–∑ /talk (Message), —Å—Ä–∞–∑—É –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –∫–∞—Ä—Ç–∏–Ω–∫—É+–∫–Ω–æ–ø–∫–∏ –≤—ã–±–æ—Ä–∞ –ª–∏—á–Ω–æ—Å—Ç–∏.
    2) –ï—Å–ª–∏ —á–µ—Ä–µ–∑ –∫–Ω–æ–ø–∫—É talk_run (CallbackQuery), —É–¥–∞–ª—è–µ–º –º–µ–Ω—é, –ø–æ—Ç–æ–º –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –∫–∞—Ä—Ç–∏–Ω–∫—É+–∫–Ω–æ–ø–∫–∏.
    """
    user = update.effective_user
    logger.info(f"{user.first_name} ({user.id}) –≤—ã–∑–≤–∞–ª –∫–æ–º–∞–Ω–¥—É /talk")

    # –ï—Å–ª–∏ —ç—Ç–æ CallbackQuery, —É–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä–æ–µ –º–µ–Ω—é
    if update.callback_query:
        query = update.callback_query
        await query.answer()
        await query.message.delete()

    chat_id = update.effective_chat.id

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ñ–∞–π–ª images/talk.jpg
    photo_path = "images/talk.jpg"
    try:
        await context.bot.send_photo(
            chat_id=chat_id,
            photo=open(photo_path, "rb")
        )
    except Exception as e:
        logger.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å talk.jpg: {e}")

    # –ü—Ä–µ–¥–ª–∞–≥–∞–µ–º –≤—ã–±—Ä–∞—Ç—å –æ–¥–Ω—É –∏–∑ –ª–∏—á–Ω–æ—Å—Ç–µ–π
    text = "üë• –° –∫–µ–º —Ö–æ—Ç–∏—Ç–µ –ø–æ–≥–æ–≤–æ—Ä–∏—Ç—å? –í—ã–±–µ—Ä–∏—Ç–µ –∏–∑ —Å–ø–∏—Å–∫–∞:"
    await context.bot.send_message(
        chat_id=chat_id,
        text=text,
        parse_mode="HTML",
        reply_markup=get_persona_keyboard()
    )

    return TALK_PERSONA


async def choose_persona(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """
    –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–∞–∂–∞—Ç–∏—è –∫–Ω–æ–ø–æ–∫ persona_*:
    –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤—ã–±—Ä–∞–Ω–Ω—ã–π –ø—Ä–æ–º–ø—Ç –∏ –ø–µ—Ä–µ—Ö–æ–¥–∏–º –∫ –≤–≤–æ–¥—É –≤–æ–ø—Ä–æ—Å–æ–≤.
    """
    query = update.callback_query
    await query.answer()
    persona_key = query.data  # –Ω–∞–ø—Ä–∏–º–µ—Ä, "persona_einstein"
    user = query.from_user

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–∏–π —Å–∏—Å—Ç–µ–º–Ω—ã–π –ø—Ä–æ–º–ø—Ç
    context.user_data["persona_prompt"] = PERSONA_PROMPTS.get(persona_key)
    logger.info(f"{user.first_name} ({user.id}) –≤—ã–±—Ä–∞–ª –ª–∏—á–Ω–æ—Å—Ç—å: {persona_key}")

    # –£–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∫–∞—Ä—Ç–∏–Ω–∫–æ–π –∏ –∫–Ω–æ–ø–∫–∞–º–∏
    await query.message.delete()

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∫–æ—Ä–æ—Ç–∫–æ–µ –≤—Å—Ç—É–ø–∏—Ç–µ–ª—å–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ + –∫–Ω–æ–ø–∫—É ¬´–ó–∞–∫–æ–Ω—á–∏—Ç—å¬ª
    persona_name = persona_key.split("_")[1].capitalize()
    welcome = (
        f"üó£ –í—ã –æ–±—â–∞–µ—Ç–µ—Å—å —Å <b>{persona_name}</b>.\n"
        "–ó–∞–¥–∞–π—Ç–µ –≤–∞—à –≤–æ–ø—Ä–æ—Å:"
    )
    await context.bot.send_message(
        chat_id=query.from_user.id,
        text=welcome,
        parse_mode="HTML",
        reply_markup=get_end_talk_keyboard()
    )

    return TALK_MODE


async def handle_talk_message(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """
    –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç —Ç–µ–∫—Å—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ —Ä–µ–∂–∏–º–µ TALK_MODE:
    –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Å–∏—Å—Ç–µ–º–Ω—ã–π –ø—Ä–æ–º–ø—Ç + –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–π —Ç–µ–∫—Å—Ç –≤ OpenAI, –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –æ—Ç–≤–µ—Ç + –∫–Ω–æ–ø–∫—É ¬´–ó–∞–∫–æ–Ω—á–∏—Ç—å¬ª.
    """
    user = update.effective_user
    user_input = update.message.text.strip()
    logger.info(f"{user.first_name} ({user.id}) –Ω–∞–ø–∏—Å–∞–ª –≤ /talk: {user_input}")

    persona_prompt = context.user_data.get("persona_prompt")
    if not persona_prompt:
        # –ï—Å–ª–∏ –ø–æ –∫–∞–∫–æ–π-—Ç–æ –ø—Ä–∏—á–∏–Ω–µ –ø—Ä–æ–º–ø—Ç –Ω–µ —Å–æ—Ö—Ä–∞–Ω–∏–ª—Å—è
        await update.message.reply_text("‚ö†Ô∏è –ß—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ /talk –µ—â–µ —Ä–∞–∑.")
        return ConversationHandler.END

    try:
        response_text = await ask_chatgpt([
            {"role": "system", "content": persona_prompt},
            {"role": "user", "content": user_input}
        ])
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞—â–µ–Ω–∏–∏ –∫ OpenAI –≤ /talk: {e}")
        response_text = "üòî –ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, –Ω–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –æ—Ç–≤–µ—Ç. –ü–æ–≤—Ç–æ—Ä–∏—Ç–µ –ø–æ–ø—ã—Ç–∫—É."

    await update.message.reply_text(
        response_text,
        reply_markup=get_end_talk_keyboard()
    )

    return TALK_MODE


async def return_to_menu_talk(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """
    –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ ¬´–ó–∞–∫–æ–Ω—á–∏—Ç—å¬ª (end_talk) –≤ –¥–∏–∞–ª–æ–≥–µ /talk.
    –£–¥–∞–ª—è–µ—Ç —Ç–µ–∫—É—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é.
    """
    query = update.callback_query
    await query.answer()
    await query.message.delete()

    await context.bot.send_message(
        chat_id=query.from_user.id,
        text=(
            "üéâ <b>–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ ChatGPT –±–æ—Ç–∞!</b>\n\n"
            "–í—ã–±–µ—Ä–∏—Ç–µ –æ–¥–Ω—É –∏–∑ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —Ñ—É–Ω–∫—Ü–∏–π:"
        ),
        parse_mode="HTML",
        reply_markup=get_main_menu_keyboard()
    )
    return ConversationHandler.END


async def cancel_talk(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """
    –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /cancel –≤–æ –≤—Ä–µ–º—è /talk.
    –°–æ–æ–±—â–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é, —á—Ç–æ –¥–∏–∞–ª–æ–≥ –∑–∞–≤–µ—Ä—à—ë–Ω, –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é.
    """
    user = update.effective_user
    logger.info(f"{user.first_name} ({user.id}) –æ—Ç–º–µ–Ω–∏–ª /talk")
    await update.message.reply_text("‚ùå –í—ã –≤—ã—à–ª–∏ –∏–∑ –¥–∏–∞–ª–æ–≥–∞.")
    await update.message.reply_text(
        "üéâ <b>–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ ChatGPT –±–æ—Ç–∞!</b>\n\n"
        "–í—ã–±–µ—Ä–∏—Ç–µ –æ–¥–Ω—É –∏–∑ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —Ñ—É–Ω–∫—Ü–∏–π:",
        parse_mode="HTML",
        reply_markup=get_main_menu_keyboard()
    )
    return ConversationHandler.END
