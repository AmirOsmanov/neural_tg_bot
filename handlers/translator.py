"""
handlers.translator
===================

–ú–æ–¥—É–ª—å ¬´üåê –ü–µ—Ä–µ–≤–æ–¥—á–∏–∫¬ª.

–ü–æ–∑–≤–æ–ª—è–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –≤—ã–±—Ä–∞—Ç—å —Ü–µ–ª–µ–≤–æ–π —è–∑—ã–∫ (–∞–Ω–≥–ª–∏–π—Å–∫–∏–π, –∏—Å–ø–∞–Ω—Å–∫–∏–π,
–∫–∏—Ç–∞–π—Å–∫–∏–π) –∏ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Ç–µ–∫—Å—Ç –Ω–∞ –ø–µ—Ä–µ–≤–æ–¥. –û—Ç–≤–µ—Ç —Ñ–æ—Ä–º–∏—Ä—É–µ—Ç—Å—è ChatGPT-–º.

–°—Ü–µ–Ω–∞—Ä–∏–π —Ä–∞–±–æ—Ç—ã
---------------
1. `/translator` –∏–ª–∏ –∫–Ω–æ–ø–∫–∞ ¬´–ü–µ—Ä–µ–≤–æ–¥—á–∏–∫¬ª –≤ –≥–ª–∞–≤–Ω–æ–º –º–µ–Ω—é.
2. –ë–æ—Ç –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç –∫–∞—Ä—Ç–∏–Ω–∫—É `images/translator.jpg` –∏ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
   —Å –≤–∞—Ä–∏–∞–Ω—Ç–∞–º–∏ —è–∑—ã–∫–æ–≤ (`CHOOSE_LANG`).
3. –ü–æ—Å–ª–µ –≤—ã–±–æ—Ä–∞ —è–∑—ã–∫–∞ –±–æ—Ç –ø—Ä–∏–≥–ª–∞—à–∞–µ—Ç –≤–≤–µ—Å—Ç–∏ —Ç–µ–∫—Å—Ç (`TRANSLATE`).
4. –ö–∞–∂–¥–æ–µ –ø–æ—Å–ª–µ–¥—É—é—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–µ—Ä–µ–≤–æ–¥–∏—Ç—Å—è –Ω–∞ –≤—ã–±—Ä–∞–Ω–Ω—ã–π —è–∑—ã–∫.
5. –í–Ω–∏–∑—É –æ—Ç–≤–µ—Ç–∞ ‚Äì –¥–≤–µ –∫–Ω–æ–ø–∫–∏:
   ‚Ä¢ ¬´üåê –°–º–µ–Ω–∏—Ç—å —è–∑—ã–∫¬ª  ‚Äì –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∫ –≤—ã–±–æ—Ä—É —è–∑—ã–∫–∞.
   ‚Ä¢ ¬´üîô –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é¬ª  ‚Äì –∑–∞–≤–µ—Ä—à–∞–µ—Ç –º–æ–¥—É–ª—å –∏ –æ—Ç–∫—Ä—ã–≤–∞–µ—Ç –º–µ–Ω—é.
"""

from __future__ import annotations
import logging
from telegram import Update, InlineKeyboardMarkup, InlineKeyboardButton
from telegram.ext import (
    ContextTypes, ConversationHandler, CommandHandler,
    CallbackQueryHandler, MessageHandler, filters,
)
from services import ui
from services.openai_client import ask_chatgpt
from handlers import basic

logger = logging.getLogger(__name__)

IMAGE = "images/translator.jpg"

CHOOSE_LANG, TRANSLATE = range(2)

LANG_MAP = {
    "lang_en": ("–∞–Ω–≥–ª–∏–π—Å–∫–∏–π", "English"),
    "lang_es": ("–∏—Å–ø–∞–Ω—Å–∫–∏–π",  "Spanish"),
    "lang_zh": ("–∫–∏—Ç–∞–π—Å–∫–∏–π",  "Chinese"),
}


def _lang_kb() -> InlineKeyboardMarkup:
    """
        –ü–æ—Å—Ç—Ä–æ–∏—Ç—å –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è –≤—ã–±–æ—Ä–∞ —è–∑—ã–∫–∞ –ø–µ—Ä–µ–≤–æ–¥–∞.

        Returns
        -------
        telegram.InlineKeyboardMarkup
            * N —Å—Ç—Ä–æ–∫ ‚Äì –ø–æ –∫–Ω–æ–ø–∫–µ –Ω–∞ –∫–∞–∂–¥—ã–π —è–∑—ã–∫ (`LANG_MAP`)
            * –ü–æ—Å–ª–µ–¥–Ω—è—è —Å—Ç—Ä–æ–∫–∞ ‚Äì ¬´üîô –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é¬ª
    """
    rows = [
        [InlineKeyboardButton(name.capitalize(), callback_data=code)]
        for code, (name, _) in LANG_MAP.items()
    ]
    rows.append([InlineKeyboardButton("üîô –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é",
                                      callback_data=ui.CB_MAIN_MENU)])
    return InlineKeyboardMarkup(rows)


def _after_kb() -> InlineKeyboardMarkup:
    """
        –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞, –ø—Ä–∏–∫—Ä–µ–ø–ª—è–µ–º–∞—è –∫ –∫–∞–∂–¥–æ–º—É –ø–µ—Ä–µ–≤–µ–¥—ë–Ω–Ω–æ–º—É —Å–æ–æ–±—â–µ–Ω–∏—é.

        –°–æ–¥–µ—Ä–∂–∏—Ç –¥–≤–µ –∫–Ω–æ–ø–∫–∏:
        1. ¬´üåê –°–º–µ–Ω–∏—Ç—å —è–∑—ã–∫¬ª  ‚Äì callback `translator_change`
        2. ¬´üîô –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é¬ª ‚Äì callback `ui.CB_MAIN_MENU`
    """
    return InlineKeyboardMarkup([[
        InlineKeyboardButton("üåê –°–º–µ–Ω–∏—Ç—å —è–∑—ã–∫", callback_data="translator_change"),
        InlineKeyboardButton("üîô –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data=ui.CB_MAIN_MENU),
    ]])


async def _end(update: Update,
               context: ContextTypes.DEFAULT_TYPE):
    """
    –ó–∞–≤–µ—Ä—à–∏—Ç—å —Ä–∞–±–æ—Ç—É –ø–µ—Ä–µ–≤–æ–¥—á–∏–∫–∞ –∏ –ø–æ–∫–∞–∑–∞—Ç—å ¬´–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é¬ª.

    –ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –≤ –Ω–µ—Å–∫–æ–ª—å–∫–∏—Ö –º–µ—Å—Ç–∞—Ö –∫–∞–∫ —É–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—ã–π *fallback*.

    Returns
    -------
    int
        `ConversationHandler.END` ‚Äì —Å–∏–≥–Ω–∞–ª –æ –≤—ã—Ö–æ–¥–µ –∏–∑ –¥–∏–∞–ª–æ–≥–∞.
    """
    await basic.show_main_menu(update, context)
    return ConversationHandler.END


async def start(update: Update,
                context: ContextTypes.DEFAULT_TYPE) -> int:
    """
    –ü–æ–∫–∞–∑–∞—Ç—å –≤—ã–±–æ—Ä —è–∑—ã–∫–æ–≤ –∏ –∫–∞—Ä—Ç–∏–Ω–∫—É-–æ–±–ª–æ–∂–∫—É.

    –ü–µ—Ä–µ—Ö–æ–¥ –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
    -------------------
    CHOOSE_LANG
    """
    if update.callback_query:
        await update.callback_query.answer()
        await update.callback_query.message.delete()

    await update.effective_message.reply_photo(
        IMAGE,
        caption="üåê –í—ã–±–µ—Ä–∏—Ç–µ —è–∑—ã–∫, –Ω–∞ –∫–æ—Ç–æ—Ä—ã–π –Ω—É–∂–Ω–æ –ø–µ—Ä–µ–≤–µ—Å—Ç–∏:",
        reply_markup=_lang_kb(),
    )
    return CHOOSE_LANG


async def choose_lang(update: Update,
                      context: ContextTypes.DEFAULT_TYPE) -> int:
    """
        Callback-—Ö—ç–Ω–¥–ª–µ—Ä –≤—ã–±–æ—Ä–∞ —è–∑—ã–∫–∞.

        –°–æ—Ö—Ä–∞–Ω—è–µ—Ç –≤—ã–±—Ä–∞–Ω–Ω—ã–π callback-id –≤ `context.user_data["lang_code"]`
        –∏ –ø—Ä–∏–≥–ª–∞—à–∞–µ—Ç –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Ç–µ–∫—Å—Ç –¥–ª—è –ø–µ—Ä–µ–≤–æ–¥–∞.

        –í–æ–∑–≤—Ä–∞—Ç
        -------
        int
            –°–æ—Å—Ç–æ—è–Ω–∏–µ `TRANSLATE` (–≥–æ—Ç–æ–≤ –∫ –ø—Ä–∏—ë–º—É —Ç–µ–∫—Å—Ç–∞) –ª–∏–±–æ
            `ConversationHandler.END`, –µ—Å–ª–∏ –Ω–∞–∂–∞—Ç–æ ¬´–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é¬ª.
    """
    query = update.callback_query
    await query.answer()

    if query.data == ui.CB_MAIN_MENU:
        return await _end(update, context)

    context.user_data["lang_code"] = query.data
    lang_ru, _ = LANG_MAP[query.data]

    await query.edit_message_caption(
        f"‚úèÔ∏è –û—Ç–ø—Ä–∞–≤—å—Ç–µ —Ç–µ–∫—Å—Ç, –∫–æ—Ç–æ—Ä—ã–π –Ω—É–∂–Ω–æ –ø–µ—Ä–µ–≤–µ—Å—Ç–∏ –Ω–∞ *{lang_ru}*.",
        parse_mode="Markdown",
        reply_markup=_after_kb(),
    )
    return TRANSLATE


async def do_translate(update: Update,
                       context: ContextTypes.DEFAULT_TYPE) -> int:
    """
        –û–±—Ä–∞–±–æ—Ç–∞—Ç—å –ª–∏–±–æ –ø–µ—Ä–µ–≤–æ–¥ —Ç–µ–∫—Å—Ç–∞, –ª–∏–±–æ –Ω–∞–∂–∞—Ç–∏–µ –≤—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã—Ö –∫–Ω–æ–ø–æ–∫.

        ‚Ä¢ –ï—Å–ª–∏ –ø—Ä–∏—à—ë–ª `CallbackQuery`:
            - `translator_change` ‚Üí —Å–Ω–æ–≤–∞ –ø–æ–∫–∞–∑ –≤—ã–±–æ—Ä–∞ —è–∑—ã–∫–∞ (`start`)
            - `ui.CB_MAIN_MENU`  ‚Üí –≤—ã—Ö–æ–¥ –∏–∑ –º–æ–¥—É–ª—è (`_end`)
        ‚Ä¢ –ï—Å–ª–∏ –ø—Ä–∏—à–ª–æ –æ–±—ã—á–Ω–æ–µ —Ç–µ–∫—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ:
            1. –ë–µ—Ä—ë—Ç —Å–æ—Ö—Ä–∞–Ω—ë–Ω–Ω—ã–π —è–∑—ã–∫ –∏–∑ `context.user_data`.
            2. –°–æ—Å—Ç–∞–≤–ª—è–µ—Ç prompt –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –µ–≥–æ –≤ ChatGPT —á–µ—Ä–µ–∑
               `ask_chatgpt`.
            3. –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç + `_after_kb()`.

        Returns
        -------
        int
            `TRANSLATE` ‚Äì –æ—Å—Ç–∞—ë–º—Å—è –≤ —Ç–æ–º –∂–µ —Å–æ—Å—Ç–æ—è–Ω–∏–∏, —á—Ç–æ–±—ã
            –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –º–æ–≥ –ø–µ—Ä–µ–≤–æ–¥–∏—Ç—å —Å–ª–µ–¥—É—é—â–∏–µ —Ç–µ–∫—Å—Ç—ã.
    """
    # ‚ñ∫ –ù–∞–∂–∞–ª–∏ inline-–∫–Ω–æ–ø–∫—É
    if update.callback_query:
        cb = update.callback_query
        await cb.answer()

        if cb.data == "translator_change":
            return await start(update, context)
        return await _end(update, context)

    lang_code = context.user_data.get("lang_code")
    if not lang_code:                           # –≤–¥—Ä—É–≥ –æ–±–æ—à–ª–∏ –ª–æ–≥–∏–∫—É
        return await start(update, context)

    lang_ru, lang_en = LANG_MAP[lang_code]
    prompt = (
        f"–ü–µ—Ä–µ–≤–µ–¥–∏ —Å–ª–µ–¥—É—é—â–∏–π —Ç–µ–∫—Å—Ç –Ω–∞ {lang_ru} –±–µ–∑ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –ø–æ—è—Å–Ω–µ–Ω–∏–π.\n\n"
        f"–¢–µ–∫—Å—Ç: ¬´{update.message.text}¬ª"
    )

    try:
        translation = await ask_chatgpt(prompt, temperature=0.3)
    except Exception as exc:
        logger.exception("Translator error: %s", exc)
        translation = "‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –ø–µ—Ä–µ–≤–µ—Å—Ç–∏, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë."

    await update.message.reply_text(translation, reply_markup=_after_kb())
    return TRANSLATE


def build_translator_handler() -> ConversationHandler:
    """ConversationHandler, –∫–æ—Ç–æ—Ä—ã–π –Ω—É–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –≤ Application."""
    return ConversationHandler(
        entry_points=[
            CommandHandler("translator", start),
            CallbackQueryHandler(start, pattern=f"^{ui.CB_TRANSLATOR}$"),
        ],
        states={
            CHOOSE_LANG: [
                CallbackQueryHandler(choose_lang,
                                     pattern="^(lang_en|lang_es|lang_zh)$"),
                CallbackQueryHandler(_end, pattern=f"^{ui.CB_MAIN_MENU}$"),
            ],
            TRANSLATE: [
                MessageHandler(filters.TEXT & ~filters.COMMAND, do_translate),
                CallbackQueryHandler(do_translate,
                                     pattern="^(translator_change|" +
                                             f"{ui.CB_MAIN_MENU})$"),
            ],
        },
        fallbacks=[CallbackQueryHandler(_end,
                                       pattern=f"^{ui.CB_MAIN_MENU}$")],
        per_chat=True,
        per_user=False,
    )
